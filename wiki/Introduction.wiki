EyeT MOVE 简介

EyeT MOVE是一个免费开源的，快速、简单的面向对象的轻量级jsp开发框架，遵循GPL v3开源协议发布，是为了方便和优化web开发模式而诞生的。其现在属于起步阶段，是我们发布的第一个版本1.0，从规划这框架到现在发布第一个版本，在我们社区团队的积极参与和努力下，我们考虑了其在易用性、扩展性和性能方面的优化，我们同时也希望在大家的积极参与下，一起将EyeT MOVE 不断优化和改进，以确保其更好的去为大家服务。

EyeT MOVE我们借鉴了很多国内外的优秀的框架和模式，最终我们使用了面向对象的开发结构和MOVE模式，并融合了Struts的Action、Spring 的实例化和Hibernate的持久化面向对象查询的思想，RoR的ORM映射和一些常用的操作，在项目配置、类库导入、模板引擎、查询语言、自动验证、项目编译、缓存机制、多数据库连接和切换、认证机制和扩展性方面均有独特癿表现。

使用EyeT MOVE可以很方便快捷的完成你开发，当然这不仅仅局限于jsp  Web项目，相信其在java应用中也会有自己独特的表现。EyeT MOVE具有很多原创的特性，我们本着变繁为简，为我所用的开发思想，用最优的代码，完成高性的功能，宗旨是让web开发变得更加的简单快捷，让web项目的性能更优。

为此，我们还会不断的努力吸取和融合更好的技术，以保证其时刻的新鲜活力和更优的性能，以提供Web开发的最佳实践。

EyeT MOVE遵循GPL开源讲可协议发布，意味着你可以免费使用EyeT MOVE，我们更希望您能给我们提出宝贵的意见，我们会虚心学习与接纳，一起为EyeT MOVE的发展而努力。
	
2 基础入门

2.1 基础概念

在学习和掌握EyeT MOVE开发之前，我们有必要了解一些相关的基础概念，这样会更加便于后面内容的理解和掌握。

2.1.1  OOP

OOP: Object Oriented Programming,面向对象的程序设计。所谓“对象”就是一个或一组数据以及处理这些数据的方法和过程的集合。面向对象的程序设计完全不同于传统的面向过程程序设计，它大大地降低了软件开发的难度，使编程就像搭积木一样简单，是当今电脑编程的一股势不可挡的潮流。 

OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。OOP 主要有以下的概念和组件： 

组件 － 数据和功能一起在运行着的计算机程序中形成的单元，组件在 OOP 计算机程序中是模块和结构化的基础。 
抽象性 － 程序有能力忽略正在处理中信息的某些方面，即对信息主要方面关注的能力。 
封装 － 也叫做信息封装：确保组件不会以不可预期的方式改变其它组件的内部状态；只有在那些提供了内部状态改变方法的组件中，才可以访问其内部状态。每类组件都提供了一个与其它组件联系的接口，并规定了其它组件进行调用的方法。 
多态性 － 组件的引用和类集会涉及到其它许多不同类型的组件，而且引用组件所产生的结果得依据实际调用的类型。 
继承性 － 允许在现存的组件基础上创建子类组件，这统一并增强了多态性和封装性。典型地来说就是用类来对组件进行分组，而且还可以定义新类为现存的类的扩展，这样就可以将类组织成树形或网状结构，这体现了动作的通用性。 

由于抽象性、封装性、重用性以及便于使用等方面的原因，以组件为基础的编程在脚本语言中已经变得特别流行。Python 和 Ruby 是最近才出现的语言，在开发时完全采用了 OOP 的思想，而流行的 Perl 脚本语言从版本5开始也慢慢地加入了新的面向对象的功能组件。用组件代替“现实”上的实体成为 JavaScript（ECMAScript） 得以流行的原因，有论证表明对组件进行适当的组合就可以在英特网上代替 HTML 和 XML 的文档对象模型（DOM）。

2.1.2 MOVE

http://cirw.in/blog/time-to-move-on

MVC模式在 编程中的应用，是一个很了不起的主意。“数据模型（Model）”可以封装与应用程序的业务逻辑相关的数据及对数据的处理方法；“视图层（View）”能 够实现数据有目的的显示；“控制器（Controller）”能够在不同层面间起到组织作用，对应用程序的流程进行控制。

不过，可能你在使用这种三层架构模式的过程中会逐渐迷惑。因为有很多代码你不知道把它放哪，就只好把它放到控制层，最后发现在控制层中塞了太多的代码。

LinkedIn的软件工程师Conrad Irwin也遇到同样的问题，于是他开始使用另一种模式：MOVE，即Models（模型）、Operations（操作）、Views（视图）、Events（事件）。近日Conrad Irwin在个人博客上分享了关于这种模式的一些观点。

Models，封装该应用程序中知道的一切；Operations，封装该应用程序要做的一切；Views，帮助用户与应用程序完成交互；Events，用于安全地连接所有这些组件。

为了避免意大利面条式的代码，图中标示出了对哪种类型的对象进行操作是允许的。例如，视图允许监听由模型产生的事件；操作允许修改模型，但模型不应涉及视图或操作。

Models（模型）
这里以一个“User”对象为原型，它至少应用有一个Email地址，也可能有用户名和电话号码。
在一个MOVE模式的Models中只包装知识。这意味着除了Get和Set功能，它们可以包含检查用户密码是否正确这样的方法，但不会包含把密码保存到数据库或传递给外部API这样的功能，因为后面这些工作将由Operations来完成。

Operations（操作）
对应用程序来说，一个常见的操作是用户登陆。这实际上是由两个子操作组成：首先从用户那里获得邮件地址和密码，然后从数据库载入“user”模型并检查密码是否匹配。
Operations是MOVE模式中的行动者。它负责修改模型，在正确的时间显示正确的视图，以及响应由用户交互引发的事件。在一个分解良好的应用程序中，每个子操作都可以独立运行。
采用这种方式的操作有一点很令人振奋，即程序启动后，整个应用本身就可以被当作一个Operations。它会根据需要生成尽可能多的子操作，其中每个子操作都并行地运行。当所有子操作都完成时，程序也便退出。

Views（视图）
登陆页面即是一个视图，它负责显示一些文本框给用户。当用户点击“登陆”按钮时，视图将产生一个“loginAttempt”事件，其中包含用户输入的用户名和密码。
用户能够看到的内容，以及能感受到的互动都由视图提供支持。它们会以一种用户能理解的形式呈现应用反馈，同时还能将简单的用户交互转换成有意义的事件。更重要的是视图不会直接改变模型，它们只是向Operations发起事件，然后通过监听等待由模型发起的事件。

Events（事件）
当用户登陆时，视图会发起“loginAttempt”事件。在登陆操作完成后，“currentUser”模型会发起一个事件通知应用登陆状态已改变。

事件监听让MOVE（及MVC）实现控制反转，允许模型更新视图。这是一种强大的抽象技巧，允许组件互不干扰地耦合在一起。
为什么是现在？

当然，Conrad Irwin并不想被人认为自己是在暗示MVC模式很差，这种大型应用程序架构在过去的几十年里确实非常成功。不过几十年后的今天，新的编程技术已经变得越来越流行，所以你也会在使用过程中逐渐产生一些疑惑。
MVC模式确实很了不起，但它毕竟是几十年前为老的技术而设计。MOVE模式是在其基础上的升级，让你可以更好地利用当前已有的新工具。

2.1.3 ORM

对象-关系映射（Object/Relation Mapping，简称ORM），是随着面向对象的软件开发方法发 展而产生的。面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数 据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法 直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。 

面向对象是从软件工程基本原则(如耦合、聚合、封装)的基础上发展起来的，而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。为了解决这个不匹配的现象,对象关系映射技术应运而生

2.2 获取EyeT MOVE
你可以通过SVN获取我们的最新的版本：

SVN地址：http://eyet-java-web.googlecode.com/svn/trunk/
	
更多EyeT MOVE项目资源:
	
Google项目地址：http://code.google.com/p/eyet-java-web/

2.3 关于版本

本开发手册是首次起稿操写，我们的EyeT MOVE也是首个版本的发布，所以本文档可能会有很多的不足之处，和不完整之处，我们希望大家也能给我们提提宝贵的意见，我们会尽量做到最好，我们将会在后期的版本中不断的改进，本着简单易懂的原则，提供我们最好的服务。

2.4 环境要求

EyeT MOVE可以支持Windows/Unix服务器环境，可运行亍包括Apache、IIS和nginx在内的多种WEB服务器和模式，需要JDK1.6支持，支持Mysql数据库和连接。其他数据有待验证。框架本身没有什么特别模块要求，具体的应用系统运行环境要求是视发所涉及模块。

2.5 许可协议

EyeT MOVE 遵循Apache2开源协议发布，我们的项目完全开源，本质代码共享和尊重原著的原则。同时允许代码修改，在用做商业用途。

3 架构设计

EyeT MOVE 遵循了简洁实用的设计原则，坚固开发速度和执行速度的同时，也注重易用性，下面这部分内容将会对EyeT MOVE的整体思想和架构体系作简要的阐述。

3.1 系统特性

EyeT MOVE是一个性能不错的轻量级Web开发框架，其具有很多原创的特性，我们本着变繁为简，为我所用的开发思想，用最优的代码，完成高性的功能，宗旨是让web开发变得更加的简单快捷，让web项目的性能更优。从现在的第一个版本到其往后的发展中我会将会不断地吸取来自各方的新鲜血液，持续的改进EyeT MOVE的性能，达到一个全新的阶段，使其不断的持续的发展。

ORM  简洁轻巧的ORM实现，配合简单的CURD模式，让开发效率无处不在。

查询语言  内建我们独特的查询机制，对象的封装，包括组合查询、复合查询、区间查询、统计查询、定位查询和原生查询，让你的数据查询更加简洁。
	
分组模块  不用担心大项目的分工协调和部署问题，分组模块帮你解决夸项目的难题。
	
AJAX支持  支持json格式返回客户端，我们可以随意使用自己熟悉的AJAX类进行操作。

自动验证和完成  自动完成表单数据的验证和过滤，生成安全的数据对象。
	
权限的验证  我们可以使用verify 简单快速的完成我们的权限认证。
	
字段类型的检测  字段类型强制转换，确保数据的写入和查询更安全。

3.2 目录结构

3.2.1 系统目录

global	系统用到的全局变量类的目录

operation   存放了系统常见操作类的父类

ORM   系统数据库封装类

util   系统用到了工具类

web  前端显示控制类文件

3.2.2 应用目录

Event   对应web网页资源的java类

Verify  对Event所对应资源的权限认证文件

Init   存放系统服务器启动时要执行的文件

Model   实例化对应javabean的泛型类

Entity  	数据库实例化的javabean类

Operation  常用的业务逻辑操作类

Impl   Operation 中接口的实例化类

Auth  获取对应权限的类